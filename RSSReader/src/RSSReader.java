import components.simplereader.SimpleReader;
import components.simplereader.SimpleReader1L;
import components.simplewriter.SimpleWriter;
import components.simplewriter.SimpleWriter1L;
import components.xmltree.XMLTree;
import components.xmltree.XMLTree1;

/**
 * Program to convert an XML RSS (version 2.0) feed from a given URL into the
 * corresponding HTML output file.
 *
 * @author N. Thompson
 *
 */
public final class RSSReader {

    /**
     * Private constructor so this utility class cannot be instantiated.
     */
    private RSSReader() {
    }

    /**
     * Outputs the "opening" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * <html> <head> <title>the channel tag title as the page title</title>
     * </head> <body>
     * <h1>the page title inside a link to the <channel> link</h1>
     * <p>
     * the channel description
     * </p>
     * <table border="1">
     * <tr>
     * <th>Date</th>
     * <th>Source</th>
     * <th>News</th>
     * </tr>
     *
     * @param channel
     *            the channel element XMLTree
     * @param out
     *            the output stream
     * @updates out.content
     * @requires [the root of channel is a <channel> tag] and out.is_open
     * @ensures out.content = #out.content * [the HTML "opening" tags]
     */
    private static void outputHeader(XMLTree channel, SimpleWriter out) {
        assert channel != null : "Violation of: channel is not null";
        assert out != null : "Violation of: out is not null";
        assert channel.isTag() && channel.label().equals("channel") : ""
                + "Violation of: the label root of channel is a <channel> tag";
        assert out.isOpen() : "Violation of: out.is_open";

        out.println("<html>");
        out.println("   <head>");
        out.print("       <title>");

        if (channel.child(getChildElement(channel, "title")).child(0).label()
                .equals("")) {
            out.print("No Title");
        } else {
            out.print(channel.child(getChildElement(channel, "title")).child(0)
                    .label());
        }

        out.println("</title>");
        out.println("   <head>");
        out.println("   <body>");
        out.println("       <h1>");
        out.print("           <a href=\"" + channel
                .child(getChildElement(channel, "link")).child(0).label()
                + "\">");

        if (channel.child(getChildElement(channel, "title")).child(0).label()
                .equals("")) {
            out.println("No Title");
        } else {
            out.println(channel.child(getChildElement(channel, "title"))
                    .child(0).label() + "</a>");
        }

        out.println("       </h1>");
        out.println("       <p>" + channel
                .child(getChildElement(channel, "description")).child(0).label()
                + "</p>");
        out.println("       <table border=\"1\">");
        out.println("           <tr>");
        out.println("               <th>Date</th>");
        out.println("               <th>News</th>");
        out.println("               <th>Source</th>");
        out.println("           </tr>");

    }

    /**
     * Outputs the "closing" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * </table>
     * </body> </html>
     *
     * @param out
     *            the output stream
     * @updates out.contents
     * @requires out.is_open
     * @ensures out.content = #out.content * [the HTML "closing" tags]
     */
    private static void outputFooter(SimpleWriter out) {
        assert out != null : "Violation of: out is not null";
        assert out.isOpen() : "Violation of: out.is_open";

        out.println("       </table>");
        out.println("   </body>");
        out.println("</html>");

    }

    /**
     * Finds the first occurrence of the given tag among the children of the
     * given {@code XMLTree} and return its index; returns -1 if not found.
     *
     * @param xml
     *            the {@code XMLTree} to search
     * @param tag
     *            the tag to look for
     * @return the index of the first child of type tag of the {@code XMLTree}
     *         or -1 if not found
     * @requires [the label of the root of xml is a tag]
     * @ensures <pre>
     * getChildElement =
     *  [the index of the first child of type tag of the {@code XMLTree} or
     *   -1 if not found]
     * </pre>
     */
    private static int getChildElement(XMLTree xml, String tag) {
        assert xml != null : "Violation of: xml is not null";
        assert tag != null : "Violation of: tag is not null";
        assert xml.isTag() : "Violation of: the label root of xml is a tag";

        int result = -1;
        for (int i = 0; i < xml.numberOfChildren(); i++) {
            if (xml.child(i).label().equals(tag) && xml.child(i).isTag()) {
                result = i;
            }
        }
        return result;
    }

    /**
     * Processes one news item and outputs one table row. The row contains three
     * elements: the publication date, the source, and the title (or
     * description) of the item.
     *
     * @param item
     *            the news item
     * @param out
     *            the output stream
     * @updates out.content
     * @requires [the label of the root of item is an <item> tag] and
     *           out.is_open
     * @ensures <pre>
     * out.content = #out.content *
     *   [an HTML table row with publication date, source, and title of news item]
     * </pre>
     */
    private static void processItem(XMLTree item, SimpleWriter out) {
        assert item != null : "Violation of: item is not null";
        assert out != null : "Violation of: out is not null";
        assert item.isTag() && item.label().equals("item") : ""
                + "Violation of: the label root of item is an <item> tag";
        assert out.isOpen() : "Violation of: out.is_open";

        out.println("           <tr>");
        out.println("               <td>");

        if (getChildElement(item, "pubDate") != -1) {
            out.println("                   " + item
                    .child(getChildElement(item, "pubDate")).child(0).label());
        }

        out.println("               </td>");
        out.println("               <td>");
        out.print("                   <a href=\"");

        if (getChildElement(item, "source") != -1) {
            if (!item.child(getChildElement(item, "source")).child(0).label()
                    .equals("")) {
                out.print(item.child(getChildElement(item, "source"))
                        .attributeValue("url"));
                out.print("\">");
                out.print(item.child(getChildElement(item, "source")).child(0)
                        .label());
                out.println("</a>");
            } else {
                out.println("No source availible");
            }
        } else {
            out.println("No source availible");
        }

        out.println("               </td>");
        out.println("               <td>");
        out.print("                   <a href=\"");

        if (getChildElement(item, "link") != -1) {
            out.print(
                    item.child(getChildElement(item, "link")).child(0).label());
        }

        out.print("\">");

        if (getChildElement(item, "title") != -1) {

            if (item.child(getChildElement(item, "title")).child(0).label()
                    .equals("")) {
                out.print("No title availible");
            } else {
                out.print(item.child(getChildElement(item, "title")).child(0)
                        .label());
            }
        } else {

            if (item.child(getChildElement(item, "description")).child(0)
                    .label().equals("")) {
                out.print("No description availible");
            } else {
                out.print(item.child(getChildElement(item, "Description"))
                        .child(0).label());
            }
        }
        out.println("</a>");
        out.println("               </td>");
        out.println("           </tr>");

    }

    /**
     * Main method.
     *
     * @param args
     *            the command line arguments; unused here
     */
    public static void main(String[] args) {
        SimpleReader in = new SimpleReader1L();
        SimpleWriter out = new SimpleWriter1L();

        out.println("Enter XMLTree URL: ");
        String url = in.nextLine();
        XMLTree rss = new XMLTree1(url);
        XMLTree channel = rss.child(0);

        out.println("Enter a name for the output file (including .html):");
        String file = "data/" + in.nextLine();
        SimpleWriter fileOut = new SimpleWriter1L(file);

        outputHeader(channel, fileOut);

        for (int i = 0; i < channel.numberOfChildren(); i++) {
            if (channel.child(i).label().equals("item")) {
                processItem(channel.child(i), fileOut);
            }
        }

        outputFooter(fileOut);

        fileOut.close();
        in.close();
        out.close();
    }

}
